// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                Int               @id @default(autoincrement())
  firstName         String
  lastName          String

  username          String            @unique

  email             String
  password          String
  phone             String?

  role              String
  avatar            String

  templates         Template[]
  blogposts         Blogpost[]
  comments          Comment[]
  reports           Report[]
  votes             Vote[]
}

model Report {
  id                Int               @id @default(autoincrement())

  user              User              @relation(fields: [userId], references: [id])
  userId            Int
  explanation       String

  blogpost          Blogpost?         @relation("BlogpostReport", fields: [blogpostId], references: [id])
  blogpostId        Int?

  comment           Comment?          @relation("CommentReports", fields: [commentId], references: [id])
  commentId         Int?
}

model Template {
  id                Int               @id @default(autoincrement())
  title             String
  explanation       String?
  
  userId            Int
  user              User              @relation(fields: [userId], references: [id])

  blogposts         Blogpost[]        @relation("BlogpostTemplate")
  tags              Tags[]            @relation("TemplateTags")

  isForked          Boolean           @default(false)
  forkedTemplate    Template?         @relation("Fork", fields: [forkedId], references: [id])
  forkedId          Int?

  code              String
  extension         String

  forks             Template[]        @relation("Fork")
}

model Tags {
  id                Int               @id @default(autoincrement())
  tag               String            @unique 

  templates         Template[]        @relation("TemplateTags")
  blogposts         Blogpost[]        @relation("BlogpostTags")
}

model Blogpost {
  id                Int               @id @default(autoincrement())
  title             String
  content           String

  tags              Tags[]            @relation("BlogpostTags")
  templates         Template[]        @relation("BlogpostTemplate")
  comments          Comment[]         @relation("BlogpostComment")
  votes             Vote[]            @relation("BlogVote")
  reports           Report[]          @relation("BlogpostReport")

  userId            Int
  user              User              @relation(fields: [userId], references: [id])

  isHidden          Boolean           @default(false)
}

model Comment {
  id                Int               @id @default(autoincrement())

  text              String

  userId            Int
  user              User              @relation(fields: [userId], references: [id])

  votes             Vote[]            @relation("CommentVote")

  reports           Report[]          @relation("CommentReports")

  blogpostId        Int
  blogpost          Blogpost          @relation("BlogpostComment", fields: [blogpostId], references: [id])

  isHidden          Boolean           @default(false)

  parentId          Int?
  parent            Comment?          @relation("Replies", fields: [parentId], references: [id])
  
  replies           Comment[]         @relation("Replies")
}

model Vote {
  id                Int               @id @default(autoincrement())

  userId            Int
  user              User              @relation(fields: [userId], references: [id])
  type              Boolean           @default(true) /// true = upvote, false = downvote

  blogpostId        Int?
  blogpost          Blogpost?         @relation("BlogVote", fields: [blogpostId], references: [id])

  commentId         Int?
  comment           Comment?          @relation("CommentVote", fields: [commentId], references: [id])
}
